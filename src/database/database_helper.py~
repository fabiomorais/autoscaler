import mysql.connector
import subprocess

from project_util import *
from flavor_util import *
from server_util import *
from database_util import *

def delete_tables(cursor):
	
	TABLES = []
	TABLES.append("DROP TABLE IF EXISTS cpu_usage")
	TABLES.append("DROP TABLE IF EXISTS vm")
	TABLES.append("DROP TABLE IF EXISTS project")
	TABLES.append("DROP TABLE IF EXISTS flavor")

	for x in range(0, len(TABLES)):
		#print "Deleting table {}. ".format(x)
	        cursor.execute(TABLES[x])

def create_tables(cursor):

	TABLES = []
	TABLES.append(
	"CREATE TABLE `project` ("
	"`ID` VARCHAR(255) NOT NULL,"
	"`NAME` VARCHAR(255),"
	"PRIMARY KEY (`ID`)"
	")")

	TABLES.append(
	"CREATE TABLE `flavor` ("
	"`ID` VARCHAR(255) NOT NULL,"
	"`NAME` VARCHAR(255),"
	"`VCPUS` FLOAT,"
	"`RAM` FLOAT,"
	"`DISK` FLOAT,"
	"PRIMARY KEY (`ID`)"
	")")

	TABLES.append(
	"CREATE TABLE `vm` ("
	"`ID` VARCHAR(255) NOT NULL,"
	"`NAME` VARCHAR(255),"
	"`IMAGE_ID` VARCHAR(255),"
	"`FLAVOR_ID` VARCHAR(255),"
	"`CREATION_DATE` TIMESTAMP,"
	"PRIMARY KEY (`ID`)," 
	"CONSTRAINT `vm_ibfk_1` FOREIGN KEY (`FLAVOR_ID`) REFERENCES `flavor`(`ID`) ON DELETE CASCADE"
	")")

	
	TABLES.append(
	"CREATE TABLE `cpu_usage` ("
	"`ID` INT NOT NULL AUTO_INCREMENT,"
	"`TIME` TIMESTAMP,"
	"`VM_ID` VARCHAR(255),"
	"`PROJECT_ID` VARCHAR(255),"
	"`CPU_UTIL` FLOAT," 
	"PRIMARY KEY (`ID`),"
	"CONSTRAINT `cpu_usage_ibfk_1` FOREIGN KEY (`VM_ID`) REFERENCES `vm`(`ID`) ON DELETE CASCADE,"
	"CONSTRAINT `cpu_usage_ibfk_2` FOREIGN KEY (`PROJECT_ID`) REFERENCES `project`(`ID`) ON DELETE CASCADE"
	")")	
	
	for x in range(0, len(TABLES)):
		#print "Creating table {}. ".format(x)
	        cursor.execute(TABLES[x])

def init_database(env):

	cnx = mysql.connector.connect(user=env.database_user, password=env.database_password, host=env.database_addr, database=env.database_database, port=env.database_port)
	cursor = cnx.cursor()

	delete_tables(cursor)
	create_tables(cursor)
	
	cnx.commit()
	cnx.close()

def get_project_insert_structure():

	add_project = ("INSERT INTO project (ID, NAME) VALUES (\"{0}\", \"{1}\")")
	return add_project

def get_flavor_insert_or_update_structure():

	add_flavor = ("INSERT INTO flavor (ID, NAME, VCPUS, RAM, DISK) VALUES (\"{0}\", \"{1}\", {2}, {3}, {4}) ON DUPLICATE KEY UPDATE NAME = \"{1}\", VCPUS = {2}, RAM = {3}, DISK = {4}")
	return add_flavor

def get_server_insert_or_update_structure():

	add_server = ("INSERT INTO vm (ID, NAME, IMAGE_ID, FLAVOR_ID, CREATION_DATE) SELECT \"{0}\", \"{1}\", \"{3}\", \"{2}\", \"{4}\" ON DUPLICATE KEY UPDATE NAME = \"{1}\", IMAGE_ID = \"{3}\", FLAVOR_ID = \"{2}\"")
	return add_server

def get_cpu_usage_insert_structure():

	add_cpu_usage = ("INSERT INTO cpu_usage (TIME, VM_ID, PROJECT_ID, CPU_UTIL) SELECT \"{0}\", v.ID, p.ID, {3} FROM project AS p, vm AS v WHERE v.ID = \"{1}\" AND p.ID= \"{2}\"")
	return add_cpu_usage

def get_server_update_structure():

	update_server = ("UPDATE vm SET INSTANCE_NAME = , IMAGE_ID, FLAVOR_ID) SELECT \"{0}\", \"{1}\", \"{3}\", ID FROM flavor WHERE FLAVOR_ID = \"{2}\"")
	return update_server

def get_meter_create_or_update_view_structure():
	create_view = ("CREATE OR REPLACE VIEW cpu_util_mean AS SELECT MAX(c.TIME) AS TIME, c.PROJECT_ID, AVG(c.CPU_UTIL) AS CPU_UTIL_PERCENT, (AVG(c.CPU_UTIL) * AVG(f.VCPUS) / 100) AS CPU_UTIL, AVG(f.VCPUS) AS CPU_ALLOC FROM cpu_usage AS c, vm AS v, flavor AS f WHERE c.PROJECT_ID = \"{0}\" AND c.TIME >= \"{1}\" AND c.VM_ID = v.ID AND v.FLAVOR_ID = f.ID")
	return create_view

def get_uptime_create_or_update_view_structure():
	create_view = ("CREATE OR REPLACE VIEW vm_uptime AS SELECT ID as VM_ID, ABS(TIMESTAMPDIFF(hour, CREATION_DATE, \'{1}\')) AS HOUR, ABS(TIMESTAMPDIFF(minute, CREATION_DATE, \'{1}\')) AS MINUTE, ABS(TIMESTAMPDIFF(second, CREATION_DATE, \'{1}\')) AS SECOND, \'{1}\' AS TIME FROM vm")
	return create_view

def execute_command(env, command_structure, command_data_values):

	command	= command_structure.format(*command_data_values)

	#print command

	cnx = mysql.connector.connect(user=env.database_user, password=env.database_password, host=env.database_addr, database=env.database_database, port=env.database_port)

	cursor = cnx.cursor()
	cursor.execute(command)
	
	cnx.commit()
	cnx.close()

def insert_project(env, project_id, project_name):
	
	insert_structure 	= get_project_insert_structure()
	insert_data_values	= get_data_project(project_id, project_name)

	execute_command(env, insert_structure, insert_data_values)

def insert_or_update_flavor(env, flavor):
	
	structure 	= get_flavor_insert_or_update_structure()
	data_values	= get_data_flavor(flavor)

	execute_command(env, structure, data_values)

def insert_or_update_server(env, server):
	
	structure 	= get_server_insert_or_update_structure()
	data_values	= get_data_server(server)

	execute_command(env, structure, data_values)

def insert_cpu_usage(env, timestamp, server_id, project_id, cpu_util):
	
	insert_structure 	= get_cpu_usage_insert_structure()
	insert_data_values	= (timestamp, server_id, project_id, cpu_util)

	execute_command(env, insert_structure, insert_data_values)

def insert_meter_usage(env, meter_type, server_id, project_id, timestamp, meter_util):

	if meter_type == 'cpu_util':
		insert_cpu_usage(env, timestamp, server_id, project_id, meter_util)

def insert_or_update_flavors(env, flavors):
	for x in range(0, len(flavors['flavors'])):
		insert_or_update_flavor(env, flavors['flavors'][x])

def insert_or_update_servers(env, servers):
	for x in range(0, len(servers['servers'])):
		insert_or_update_server(env, servers['servers'][x])

def create_or_update_meter_average_view(env, meter_type, project_id, monitoring_interval):
	
	structure 	= get_meter_create_or_update_view_structure()
	data_values	= (project_id, get_database_timestamp_format(monitoring_interval[1], '%Y-%m-%dT%H:%M:%S'))

	execute_command(env, structure, data_values)

def create_or_update_uptime_vm_view(env, project_id, monitoring_interval):
	
	structure 	= get_uptime_create_or_update_view_structure()
	data_values	= (project_id, get_database_timestamp_format(monitoring_interval[0], '%Y-%m-%dT%H:%M:%S'))

	print data_values

	execute_command(env, structure, data_values)		
